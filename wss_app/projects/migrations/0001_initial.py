# Generated by Django 5.0.3 on 2024-04-08 23:16

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BuildingWithExistingInfrastructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(1)])),
                ('bathroom_sink', models.PositiveIntegerField(blank=True, null=True)),
                ('kitchen_sink', models.PositiveIntegerField(blank=True, null=True)),
                ('toilet_seat', models.PositiveIntegerField(blank=True, null=True)),
                ('washing_machine', models.PositiveIntegerField(blank=True, null=True)),
                ('dishwasher', models.PositiveIntegerField(blank=True, null=True)),
                ('shower', models.PositiveIntegerField(blank=True, null=True)),
                ('bathtub', models.PositiveIntegerField(blank=True, null=True)),
                ('building_residence', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('slug', models.SlugField(blank=True, editable=False, unique=True)),
                ('floor_siphon', models.PositiveIntegerField(blank=True, null=True)),
                ('building_area', models.FloatField(validators=[django.core.validators.MinValueValidator(1.0)])),
                ('property_area', models.FloatField(validators=[django.core.validators.MinValueValidator(1.0)])),
                ('green_area', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('underground_parking_spots', models.PositiveIntegerField()),
                ('floors', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('project_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BuildingWithoutExistingInfrastructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(1)])),
                ('bathroom_sink', models.PositiveIntegerField(blank=True, null=True)),
                ('kitchen_sink', models.PositiveIntegerField(blank=True, null=True)),
                ('toilet_seat', models.PositiveIntegerField(blank=True, null=True)),
                ('washing_machine', models.PositiveIntegerField(blank=True, null=True)),
                ('dishwasher', models.PositiveIntegerField(blank=True, null=True)),
                ('shower', models.PositiveIntegerField(blank=True, null=True)),
                ('bathtub', models.PositiveIntegerField(blank=True, null=True)),
                ('building_residence', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('slug', models.SlugField(blank=True, editable=False, unique=True)),
                ('project_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InfrastructureProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(1)])),
                ('existing_plumbing_depth', models.FloatField(validators=[django.core.validators.MinValueValidator(1.7), django.core.validators.MaxValueValidator(3)])),
                ('new_plumbing_length', models.FloatField(validators=[django.core.validators.MinValueValidator(1.0)])),
                ('new_plumbing_diameter', models.CharField(choices=[('DN90', 'DN90'), ('DN110', 'DN110'), ('DN125', 'DN125'), ('DN160', 'DN160'), ('DN200', 'DN200'), ('DN225', 'DN225'), ('DN250', 'DN250'), ('DN315', 'DN315'), ('DN355', 'DN355'), ('DN400', 'DN400')])),
                ('existing_sewer_depth', models.FloatField(validators=[django.core.validators.MinValueValidator(2.3), django.core.validators.MaxValueValidator(5)])),
                ('new_sewer_length', models.FloatField(validators=[django.core.validators.MinValueValidator(1.0)])),
                ('new_sewer_diameter', models.CharField(choices=[('DN315', 'DN315'), ('DN400', 'DN400'), ('DN500', 'DN500'), ('DN630', 'DN630'), ('DN800', 'DN800'), ('DN1000', 'DN1000')])),
                ('settlement_inhabitants', models.CharField(choices=[('Bellow 1000 inhabitants', 'Bellow 1000 inhabitants'), ('Bellow 100 000 inhabitants', 'Bellow 100 000 inhabitants'), ('Above 100 000 inhabitants', 'Above 100 000 inhabitants')])),
                ('existing_pavement', models.CharField(choices=[('Asphalt', 'Asphalt'), ('Concrete', 'Concrete'), ('Stone paving', 'Stone paving'), ('Pavers', 'Pavers'), ('None', 'None')])),
                ('slug', models.SlugField(blank=True, editable=False, unique=True)),
                ('project_creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
